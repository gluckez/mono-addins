# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Linux Build Pipeline with GTK3

on:
  push:
    branches: [ "refactor/GTK2ToGTK3" ]
  pull_request:
    branches: [ "refactor/GTK2ToGTK3", "develop", "main" ]

jobs:

  build:

    strategy:
      fail-fast: false
      matrix:
        configuration: [Debug, DebugGtk3, DebugNoGui, Release]

    runs-on: ubuntu-latest # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: true

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        
    - name: Install Mono and other packages
      run: |       
        sudo apt-get update
        sudo apt-get install -y gnupg ca-certificates
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
        # Reference mono and msbuild from stable repo for versions 6.12.0.122 (mono) and 16.6.0.15201 (msbuild)
        echo "deb https://download.mono-project.com/repo/ubuntu stable-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
        # Reference mono and msbuild from preview repo for versions 6.12.0.147 (mono) and 16.10.1 (msbuild)
        # echo "deb https://download.mono-project.com/repo/ubuntu preview-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-preview.list
         sudo apt-get update
        # Install mono-complete and ca-certificates-mono
        sudo apt-get install -y mono-complete ca-certificates-mono
        # Synchronise Mono SSL certs
        cert-sync /etc/ssl/certs/ca-certificates.crt
        # Install extra packages required for dotdevelop build (these were copied, not all of them are needed for mono-addins)
        sudo apt-get install -y sed git build-essential intltool nuget fsharp gtk-sharp3
        sudo apt-get install -y software-properties-common
        sudo apt-get update
      env:
          name: SSL_CERT_DIR
          value: "/etc/ssl/certs"

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    #- name: Setup MSBuild.exe
    #  uses: microsoft/setup-msbuild@v1.0.2    
    - name: Checking Msbuild
      run: |
        echo $DOTNET_ROOT
        echo $(msbuild --version)
        echo $(mono -V)
        echo $(which dotnet)
      
    - name: Verify OS and tools versions
      run: |
        uname -a
        git --version
        make --version
        mono -V
        msbuild -version
        dotnet --info
        # git config --global --add safe.directory /__w/dotdevelop/dotdevelop

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore and build the application
      run: msbuild Mono.Addins.sln /p:Configuration=${{ matrix.configuration }}
      env:
        Configuration: ${{ matrix.configuration }}
        
    #- name: Checkout configure and build
    #  run: |
    #    sudo cert-sync /etc/ssl/certs/ca-certificates.crt
    #    ./configure --profile=gnome
    #    make

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    #- name: Decode the pfx
    #  run: |
    #    $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #    $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #    [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    #- name: Create the app package
    #  run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #  env:
    #    Appx_Bundle: Always
    #    Appx_Bundle_Platforms: x86|x64
    #    Appx_Package_Build_Mode: StoreUpload
    #    Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    #- name: Remove the pfx
    #  run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    #- name: Upload build artifacts
    #  uses: actions/upload-artifact@v3
    #  with:
    #    name: MSIX Package
    #    path: ${{ env.Wap_Project_Directory }}\AppPackages
